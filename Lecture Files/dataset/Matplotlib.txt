What is MATPLOTLIB?
Matplotlib is a low level graph 
plotting library in python that 
serves as a visualization utility.
Matplotlib is open source and we 
can use it freely.

Matplotlib is mostly written in python, 
a few segments are written in C, 
Objective-C and Javascript for 
Platform compatibility.
_______________________________________
Installation of Matplotlib
Importing
_______________________________________
Pyplot
Most of the Matplotlib utilities 
lies under the pyplot submodule, 
and are usually imported under 
the plt alias:

import matplotlib.pyplot as plt
_______________________________________
Draw a line in a diagram from position 
(0,0) to position (6,250):

import matplotlib.pyplot as plt
import numpy as np
xpoints = np.array([0, 6])
ypoints = np.array([0, 250])
plt.plot(xpoints, ypoints)
plt.show()
_______________________________________
Plotting x and y points
The plot() function is used to draw 
points (markers) in a diagram.

By default, the plot() function 
draws a line from point to point.

The function takes parameters 
for specifying points in the diagram.

Parameter 1 is an array containing 
the points on the x-axis.

Parameter 2 is an array containing 
the points on the y-axis.

If we need to plot a line from (1, 3) 
to (8, 10), we have to pass two 
arrays [1, 8] and [3, 10] to the 
plot function.
_______________________________________
Example:
Draw a line in a diagram from position
(1, 3) to position (8, 10):

import matplotlib.pyplot as plt
import numpy as np

xpoints = np.array([1, 8])
ypoints = np.array([3, 10])

plt.plot(xpoints, ypoints)
plt.show()
_______________________________________
Plotting Without Line
To plot only the markers, 
you can use shortcut string 
notation parameter 'o', which 
means 'rings'.

Example:
Draw two points in the diagram, 
one at position (1, 3) and one 
in position (8, 10):

import matplotlib.pyplot as plt
import numpy as np

xpoints = np.array([1, 8])
ypoints = np.array([3, 10])

plt.plot(xpoints, ypoints, 'o')
plt.show()
__________________________________________
Multiple Points
You can plot as many points as you
like, just make sure you have the 
same number of points in both axis.

Example
Draw a line in a diagram from position 
(1, 3) to (2, 8) then to (6, 1) and 
finally to position (8, 10):

import matplotlib.pyplot as plt
import numpy as np

xpoints = np.array([1, 2, 6, 8])
ypoints = np.array([3, 8, 1, 10])

plt.plot(xpoints, ypoints)
plt.show()
________________________________________
Default X-Points
If we do not specify the 
points on the x-axis, they 
will get the default values 
0, 1, 2, 3 etc., depending 
on the length of the y-points.

So, if we take the same example 
as above, and leave out the 
x-points, the diagram will look 
like this:

Example
Plotting without x-points:

import matplotlib.pyplot as plt
import numpy as np

ypoints = np.array([3, 8, 1, 10, 5, 7])

plt.plot(ypoints)
plt.show()
_____________________________________________
Markers
You can use the keyword argument 
marker to emphasize each point with 
a specified marker:
Example:
Mark each point with a circle:

import matplotlib.pyplot as plt
import numpy as np

ypoints = np.array([3, 8, 1, 10])

plt.plot(ypoints, marker = 'o')
plt.show()

Note: In order to make it star instead
of circle or ring.....use star
_______________________________________
Format Strings fmt
You can also use the shortcut 
string notation parameter to 
specify the marker.

This parameter is also called 
fmt, and is written with 
this syntax:

marker|line|color
Example
Mark each point with a circle:
import matplotlib.pyplot as plt
import numpy as np

ypoints = np.array([3, 8, 1, 10])
plt.plot(ypoints, 'o:r')
plt.show()
________________________________________
Marker Size
You can use the keyword argument 
markersize or the shorter version, 
ms to set the size of the markers:

Example
Set the size of the markers to 20:

import matplotlib.pyplot as plt
import numpy as np

ypoints = np.array([3, 8, 1, 10])

plt.plot(ypoints, marker = 'o', ms = 20)
plt.show()
__________________________________________
Marker Color
You can use the keyword argument 
markeredgecolor or the shorter mec 
to set the color of the edge of the 
markers:

Example
Set the EDGE color to red:

import matplotlib.pyplot as plt
import numpy as np

ypoints = np.array([3, 8, 1, 10])

plt.plot(ypoints, marker = 'o', ms = 20, mec = 'r')
plt.show()
_____________________________________________
Linestyle
You can use the keyword argument 
linestyle, or shorter ls, to change 
the style of the plotted line:

Example:
Use a dotted line:

import matplotlib.pyplot as plt
import numpy as np

ypoints = np.array([3, 8, 1, 10])

plt.plot(ypoints, linestyle = 'dotted')
plt.show()
___________________________________________
Example
Use a dashed line:


plt.plot(ypoints, linestyle = 'dashed')
___________________________________________
Shorter Syntax
The line style can be written 
in a shorter syntax:

linestyle can be written as ls.

dotted can be written as :.

dashed can be written as --.

Example
Shorter syntax:

plt.plot(ypoints, ls = ':')
__________________________________________
Line Color
You can use the keyword argument 
color or the shorter c to set the 
color of the line:

Example
Set the line color to red:

import matplotlib.pyplot as plt
import numpy as np

ypoints = np.array([3, 8, 1, 10])

plt.plot(ypoints, color = 'r')
plt.show()
_______________________________________
You can also use Hexadecimal color 
values:

Example
Plot with a beautiful green line:

plt.plot(ypoints, c = '#4CAF50')
________________________________________
Line Width.....